# -*- coding: utf-8 -*-
"""PythonTrainer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_30PKKSEn3JyLkcmSTHPrZgugEIxYUM1
"""

!cp /content/drive/MyDrive/testing.zip testing.zip
!cp /content/drive/MyDrive/training.zip training.zip

!wget https://swarm-gateways.net/bzz:/47537c7a14ed5e7968e3f94de1afa65ab411535f6fc5d5205fafbee0e554a38a/MnistImageLoader.py

!unzip -q "/content/testing.zip"

!unzip -q "/content/training.zip"

# -*- coding: utf-8 -*-
import numpy as np
np.random.seed(2016)

import os
import glob
import cv2
import math
import pickle
import datetime
#import pandas as pd
from tensorflow.keras.optimizers import SGD

from tensorflow import keras
import tensorflow as tf
from tensorflow.python.framework.convert_to_constants import convert_variables_to_constants_v2
import numpy as np



#from sklearn.cross_validation import train_test_split
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Convolution2D, MaxPooling2D
from keras.utils import np_utils
from keras.models import model_from_json
from sklearn.metrics import log_loss
import time
from MnistImageLoader import load_images,ReShapeData
# from FreezeKerasToTF import freeze_session
from keras import backend as K

#
#The following variables should be set to the folder where MNIST images have been extracted 
#
mnist_train_path_full="/content/training/*/*.png"
mnist_test_path="/content/testing/*/*.png"
nb_classes = 10 #we have these many digits in our training

#
#Load training images
#
print("Loading training images")
(train_data, train_target)=load_images(mnist_train_path_full)
(train_data1,train_target1)=ReShapeData(train_data,train_target,nb_classes)
print('Shape:', train_data1.shape)
print(train_data1.shape[0], ' train images were loaded')
#
#Load test images
#
print("Loading testing images")
(test_data, test_target)=load_images(mnist_test_path)
(test_data1,test_target1)=ReShapeData(test_data,test_target,nb_classes)
print('Shape:', test_data1.shape)
print(test_data1.shape[0], ' test images were loaded')
print("Load complete")
# 
# Create a sequential model
#
model = Sequential()




# Flatten the network
model.add(Flatten())
# Add a fully-connected hidden layer
model.add(Dense(128))
# Add a ReLU activation function
model.add(Activation(activation = "softmax"))
# Add a fully-connected output layer - the output layer nodes should match the count of image classes
model.add(Dense(nb_classes,name="outputlayer")) 
# Add a softmax activation function
model.add(Activation("softmax"))
#
#Display Summary
#
model.summary()

# Compile the network
model.compile(
    loss = "categorical_crossentropy", 
    optimizer = SGD(lr = 0.01),
    metrics = ["accuracy"])
print("Compilation complete");
print("Train begin");
# Train the model 

total_epochs=20
start = time.time()
model.fit(
    train_data1, 
    train_target1, 
    batch_size = 128, 
    epochs = total_epochs,
	  verbose = 1)
print("Train complete");
#
#Test the model
#
print("Testing on test data")
(loss, accuracy) = model.evaluate(
    test_data1, 
    test_target1,
    batch_size = 128, 
    verbose = 1)

# Print the model's accuracy
print("Accuracy="+ str(accuracy))

# # You could save the model to individual files 

# model_json = model.to_json()
# filenameModel="TrainedMnistModel.json"
# with open(filenameModel,"w") as modelf:
# 	modelf.write(model_json)
# print("Model written to file:" + filenameModel);

# # serialize weights to HDF5
# filenameWeights="TrainedMnistModelWts.h5"
# model.save_weights(filenameWeights)
# print("Weights were saved to file:" + filenameWeights);
# #
# #Saving as a single file (model+weights)
# #
# model.save("SingleFile.h5") #this saves but the PB file does not work using C#

# #
# #Saving using Freeze approach https://stackoverflow.com/questions/45466020/how-to-export-keras-h5-to-tensorflow-pb
# #

# # frozen_graph = freeze_session(K.get_session(),
# #                               output_names=[out.op.name for out in model.outputs])
# # tf.train.write_graph(frozen_graph, "Out", "Mnist_model.pb", as_text=False)

# Convert Keras model to ConcreteFunction
full_model = tf.function(lambda x: model(x))
full_model = full_model.get_concrete_function(
    x=tf.TensorSpec(model.inputs[0].shape, model.inputs[0].dtype))

# Get frozen ConcreteFunction
frozen_func = convert_variables_to_constants_v2(full_model)
frozen_func.graph.as_graph_def()

# inspect the layers operations inside your frozen graph definition and see the name of its input and output tensors
layers = [op.name for op in frozen_func.graph.get_operations()]
print("-" * 50)
print("Frozen model layers: ")
for layer in layers:
    print(layer)

print("-" * 50)
print("Frozen model inputs: ")
print(frozen_func.inputs)
print("Frozen model outputs: ")
print(frozen_func.outputs)

# Save frozen graph from frozen ConcreteFunction to hard drive
# serialize the frozen graph and its text representation to disk.
tf.io.write_graph(graph_or_graph_def=frozen_func.graph,
                  logdir="./frozen_models",
                  name="simple_frozen_graph.pb",
                  as_text=False)

#Optional
tf.io.write_graph(graph_or_graph_def=frozen_func.graph,
                  logdir="./frozen_models",
                  name="simple_frozen_graph.pbtxt",
                as_text=True)

model.summary()